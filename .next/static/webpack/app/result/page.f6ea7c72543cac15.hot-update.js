"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/result/page",{

/***/ "(app-pages-browser)/./lib/imageFilters.ts":
/*!*****************************!*\
  !*** ./lib/imageFilters.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   simulateAfter: function() { return /* binding */ simulateAfter; }\n/* harmony export */ });\nfunction simulateAfter(source, productKey, skinProblems) {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) throw new Error(\"Canvas context non disponible\");\n    canvas.width = source.width;\n    canvas.height = source.height;\n    ctx.drawImage(source, 0, 0);\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    // Si on a des problèmes détectés, appliquer un filtre intelligent ciblé\n    if (skinProblems && skinProblems.length > 0) {\n        applyTargetedFilters(data, canvas.width, canvas.height, skinProblems, productKey);\n    } else {\n        // Sinon, appliquer le filtre global de base\n        applyBasicFilter(data, productKey);\n    }\n    ctx.putImageData(imageData, 0, 0);\n    // Appliquer un léger flou pour lisser\n    const tempCanvas = document.createElement(\"canvas\");\n    const tempCtx = tempCanvas.getContext(\"2d\");\n    if (!tempCtx) return canvas;\n    tempCanvas.width = canvas.width;\n    tempCanvas.height = canvas.height;\n    tempCtx.filter = \"blur(0.8px)\";\n    tempCtx.drawImage(canvas, 0, 0);\n    // Ajouter le watermark\n    tempCtx.filter = \"none\";\n    tempCtx.font = \"16px Inter, sans-serif\";\n    tempCtx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n    tempCtx.strokeStyle = \"rgba(0, 0, 0, 0.5)\";\n    tempCtx.lineWidth = 2;\n    const text = \"AI Enhanced\";\n    const textWidth = tempCtx.measureText(text).width;\n    const x = tempCanvas.width - textWidth - 15;\n    const y = tempCanvas.height - 15;\n    tempCtx.strokeText(text, x, y);\n    tempCtx.fillText(text, x, y);\n    return tempCanvas;\n}\n/**\n * Applique des filtres ciblés sur les zones détectées\n */ function applyTargetedFilters(data, width, height, problems, productKey) {\n    // Créer une carte d'intensité de traitement pour chaque pixel\n    const treatmentMap = new Float32Array(width * height);\n    treatmentMap.fill(0);\n    // Pour chaque problème détecté, augmenter l'intensité du traitement dans cette zone\n    problems.forEach((problem)=>{\n        const x = Math.floor(problem.location.x / 100 * width);\n        const y = Math.floor(problem.location.y / 100 * height);\n        const w = Math.floor(problem.location.width / 100 * width);\n        const h = Math.floor(problem.location.height / 100 * height);\n        const intensity = problem.severity / 100;\n        const filterType = getFilterTypeForProblem(problem.type, productKey);\n        // Remplir la zone avec un gradient pour un effet naturel\n        for(let py = Math.max(0, y); py < Math.min(height, y + h); py++){\n            for(let px = Math.max(0, x); px < Math.min(width, x + w); px++){\n                const idx = py * width + px;\n                // Distance du centre de la zone (pour effet de gradient)\n                const centerX = x + w / 2;\n                const centerY = y + h / 2;\n                const distX = (px - centerX) / (w / 2);\n                const distY = (py - centerY) / (h / 2);\n                const dist = Math.sqrt(distX * distX + distY * distY);\n                const gradient = Math.max(0, 1 - dist);\n                treatmentMap[idx] = Math.max(treatmentMap[idx], intensity * gradient * filterType.strength);\n            }\n        }\n    });\n    // Appliquer les traitements pixel par pixel selon la carte d'intensité\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            const idx = y * width + x;\n            const dataIdx = idx * 4;\n            const intensity = treatmentMap[idx];\n            if (intensity > 0.05) {\n                // Appliquer le traitement avec l'intensité calculée\n                applyPixelTreatment(data, dataIdx, intensity, productKey);\n            }\n        }\n    }\n}\n/**\n * Applique un traitement sur un pixel spécifique\n */ function applyPixelTreatment(data, idx, intensity, productKey) {\n    const r = data[idx];\n    const g = data[idx + 1];\n    const b = data[idx + 2];\n    if (productKey === \"duo-eclat\") {\n        // Éclaircir et uniformiser\n        const brightness = 1 + 0.12 * intensity;\n        const rednessReduction = 0.85 + 0.15 * (1 - intensity);\n        data[idx] = Math.min(255, r * rednessReduction * brightness);\n        data[idx + 1] = Math.min(255, g * brightness);\n        data[idx + 2] = Math.min(255, b * brightness);\n        // Uniformisation\n        const avg = (data[idx] + data[idx + 1] + data[idx + 2]) / 3;\n        const uniformFactor = 0.1 * intensity;\n        data[idx] = data[idx] * (1 - uniformFactor) + avg * uniformFactor;\n        data[idx + 1] = data[idx + 1] * (1 - uniformFactor) + avg * uniformFactor;\n        data[idx + 2] = data[idx + 2] * (1 - uniformFactor) + avg * uniformFactor;\n    } else {\n        // Apaiser et hydrater\n        const brightness = 1 + 0.08 * intensity;\n        const rednessReduction = 0.88 + 0.12 * (1 - intensity);\n        data[idx] = Math.min(255, r * rednessReduction * brightness);\n        data[idx + 1] = Math.min(255, g * brightness);\n        data[idx + 2] = Math.min(255, b * brightness);\n        // Uniformisation plus douce\n        const avg = (data[idx] + data[idx + 1] + data[idx + 2]) / 3;\n        const uniformFactor = 0.15 * intensity;\n        data[idx] = data[idx] * (1 - uniformFactor) + avg * uniformFactor;\n        data[idx + 1] = data[idx + 1] * (1 - uniformFactor) + avg * uniformFactor;\n        data[idx + 2] = data[idx + 2] * (1 - uniformFactor) + avg * uniformFactor;\n    }\n}\n/**\n * Retourne le type de filtre à appliquer selon le type de problème\n */ function getFilterTypeForProblem(problemType, productKey) {\n    const filters = {\n        acne: {\n            strength: productKey === \"duo-eclat\" ? 1.2 : 1.0\n        },\n        wrinkle: {\n            strength: 0.8\n        },\n        dark_circle: {\n            strength: 1.0\n        },\n        pore: {\n            strength: productKey === \"duo-eclat\" ? 1.1 : 0.9\n        },\n        dark_spot: {\n            strength: productKey === \"duo-eclat\" ? 1.3 : 1.0\n        },\n        redness: {\n            strength: productKey === \"repairing-serum\" ? 1.2 : 1.0\n        }\n    };\n    return filters[problemType];\n}\n/**\n * Applique le filtre de base (ancien système)\n */ function applyBasicFilter(data, productKey) {\n    if (productKey === \"duo-eclat\") {\n        for(let i = 0; i < data.length; i += 4){\n            const r = data[i];\n            const g = data[i + 1];\n            const b = data[i + 2];\n            data[i] = r * 0.88;\n            const brightnessFactor = 1.08;\n            data[i] = Math.min(255, data[i] * brightnessFactor);\n            data[i + 1] = Math.min(255, g * brightnessFactor);\n            data[i + 2] = Math.min(255, b * brightnessFactor);\n            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n            data[i] = data[i] * 0.95 + avg * 0.05;\n            data[i + 1] = data[i + 1] * 0.95 + avg * 0.05;\n            data[i + 2] = data[i + 2] * 0.95 + avg * 0.05;\n        }\n    } else {\n        for(let i = 0; i < data.length; i += 4){\n            const r = data[i];\n            const g = data[i + 1];\n            const b = data[i + 2];\n            data[i] = r * 0.82;\n            const brightnessFactor = 1.04;\n            data[i] = Math.min(255, data[i] * brightnessFactor);\n            data[i + 1] = Math.min(255, g * brightnessFactor);\n            data[i + 2] = Math.min(255, b * brightnessFactor);\n            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n            data[i] = data[i] * 0.9 + avg * 0.1;\n            data[i + 1] = data[i + 1] * 0.9 + avg * 0.1;\n            data[i + 2] = data[i + 2] * 0.9 + avg * 0.1;\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/imageFilters.ts\n"));

/***/ })

});